generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  lastName           String
  phoneNumber        String?
  email              String    @unique
  password           String
  hashedRefreshToken String?
  role               Role      @default(USER)
  addresses          Address[]
  order              Order[]
  Cart               Cart?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("users")
}

model Cart {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @unique @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  emptyCart   Boolean    @default(false)
  cartItems   CartItem[]
  totalPrice  Float      @default(0.0)
  shippingFee Float      @default(0.0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("carts")
}

model Product {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String     @unique
  ean             String     @unique
  slug            String     @unique
  description     String
  price           Float
  category        Category   @relation(fields: [categoryId], references: [id])
  categoryId      String     @db.ObjectId
  images          String[]
  stock           Int       @default(1)
  backgroundImage String?
  productDetails  Json?
  CartItem        CartItem[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("products")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartItems")
}


model Order {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  status      OrderStatus    @default(PENDING)
  orderId     String    @unique
  cartItemId  String    @db.ObjectId
  cartItem    CartItem  @relation(fields: [cartItemId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  addressId   String    @db.ObjectId
  address     Address   @relation(fields: [addressId], references: [id])
}

model Address {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  street           String
  city             String
  country          String
  zip              String
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.ObjectId
  isDefaultAddress Boolean?
  order            Order[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("addresses")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  products    Product[]
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}



enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  SHIPPED
  CANCELLED
}